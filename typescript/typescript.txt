Intro:

	In JavaScript, function parameters and variables don't have any information! So developers need to look at documentation, or guess based on the implementation.

TypeScript allows specifying the types of data being passed around within the code, and has the ability to report errors when the types don't match.


**********
note: TypeScript uses compile time type checking. Which means it checks if the specified types match before running the code, not while running the code.
******************


Type Assignment:

	*********
let firstName: string="Dylan";

	*********
let Name: string="Anil reddy";
console.log(Name);

let age:number=25;
console.log(age);

let list:number[]=[1,2];
console.log(list);


// A type that allows any kind of value. Use it carefully—it disables TypeScript's type checking for that variable.

let data:any="Anil reddy";
console.log(data);



	*******************


FUNCTIONS WITH TYPES:


1]
	function greet(name: string): string {
  return `Hello, ${name}`;
}

console.log(greet("Alice")); // ✅ Valid
// greet(42); // ❌ Error: Argument of type 'number' is not assignable to parameter of type 'string'


--->name: string defines the parameter type
--->: string =after the parentheses defines the return type 


2] FUNCTION WITH MULTIPLE PARAMETERS:

function add(x:number,y:number):number{
		return x+y;
}

console.log(add(5,10));


3]OPTIONAL PARAMETERS:

function log(message: string, user?: string):void{
	if(user){
		console.log(`[${user}] ${message}`);
	}else{
		console.log(message);
	}
}

log("System rebooted");
log("file saved","Alice");


---->use ? to make a parameter optional *************************

4] DEFUALT PARAMETERS


function multiply(a:number, b:number=1):number{
	return a*b;
}

console.log(multiply(5));
console.log(multiply(5,2));




*********************
**********************
*********************




